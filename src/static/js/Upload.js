// Generated by CoffeeScript 1.6.3
(function() {
  var CmbModel, createUploader, handleResponse, handleResponseItem, initPage;

  createUploader = function() {
    var uploader;
    return uploader = new qq.FileUploader({
      element: document.getElementById("upl"),
      allowedExtensions: ["jpg"],
      action: "/a/upload",
      debug: true,
      onComplete: handleResponse
    });
  };

  handleResponse = function(id, fname, json) {
    var obj;
    obj = $("#preview");
    obj.attr("src", json.key);
    $("#upl").css("display", "none");
    obj.css("display", "block");
    $('#fkey').val(json.key.split("/")[2]);
    return $('#frmItem').css("display", "block");
  };

  initPage = function() {
    var viewModel;
    viewModel = new CmbModel(cmbData);
    return ko.applyBindings(viewModel);
  };

  handleResponseItem = function(data) {
    console.log(data);
    return alert(data.errCode && data.errCode !== 0 ? data.errMsg : "OK");
  };

  CmbModel = (function() {
    function CmbModel(data) {
      var _this = this;
      this.optMain = ko.observableArray(data.optMain);
      this.optCats = ko.observableArray(data.optCats);
      this.title = ko.observable('');
      this.description = ko.observable('');
      this.filter = ko.observable('');
      this.category = ko.observable('');
      this.guid = ko.observable('');
      this.fcats = ko.computed(function() {
        var f;
        f = _this.filter();
        if (!f) {
          return [];
        } else {
          return ko.utils.arrayFilter(_this.optCats(), function(it) {
            return it.par === f.key;
          });
        }
      });
      this.saveItem = function() {
        return $.post("/a/postitem", $("#frm").serialize(), handleResponseItem);
      };
    }

    return CmbModel;

  })();

  window.onload = function() {
    return createUploader();
  };

  $(function() {
    return initPage();
  });

}).call(this);
